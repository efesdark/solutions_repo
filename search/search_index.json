{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection Motivation Projectile motion, while seemingly simple, provides a rich framework for exploring fundamental principles of physics. The problem at hand is straightforward: analyze how the range of a projectile depends on its angle of projection. Despite its simplicity, the topic involves complex relationships governed by both linear and quadratic equations, making it an insightful subject of study. A key factor that makes this investigation compelling is the number of free parameters involved in projectile motion equations, such as initial velocity, gravitational acceleration, and launch height. These parameters contribute to a diverse set of solutions that model real-world scenarios, from the trajectory of a soccer ball to the flight path of a missile. Task 1. Theoretical Foundation To analyze the range as a function of the angle of projection, we start by deriving the governing equations from fundamental principles of kinematics and dynamics. The motion of a projectile in the absence of air resistance follows Newton\u2019s second law: Equations of Motion: Horizontal displacement: $$ x = v_0 \\cos(\\theta) t $$ Vertical displacement: $$ y = v_0 \\sin(\\theta) t - \\frac{1}{2}gt^2 $$ Solving these equations yields the total time of flight \\( T \\) : $$ T = \\frac{2v_0 \\sin(\\theta)}{g} $$ Substituting into the horizontal displacement equation, we obtain the range \\( R \\) : $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ This equation shows that the range depends on the square of the initial velocity and the sine of twice the projection angle. 2. Analysis of the Range The range \\( R \\) is maximized when \\( \\sin(2\\theta) \\) reaches its maximum value (1), which occurs at \\( 2\\theta = 90^\\circ \\) , or \\( \\theta = 45^\\circ \\) . Increasing the initial velocity \\( v_0 \\) increases the range quadratically. A higher gravitational acceleration \\( g \\) reduces the range. For non-zero launch height, the equation for \\( R \\) becomes more complex, requiring further analysis. 3. Practical Applications Sports: Understanding how the angle influences projectile range helps optimize techniques in soccer, basketball, and javelin throwing. Engineering: In artillery and missile technology, precise control over launch angles is essential for maximizing impact range. Space Exploration: The principles of projectile motion extend to orbital mechanics and spacecraft trajectory planning. 4. Implementation To further analyze the range as a function of the projection angle, a computational tool can be developed: - Algorithm: Implement numerical simulations in Python or MATLAB to visualize projectile motion under varying conditions. - Graphical Representation: Generate plots of range versus launch angle to observe the dependency. - Advanced Considerations: Extend the model to include air resistance, variable wind conditions, and non-flat terrain. Conclusion The study of projectile motion offers valuable insights into both theoretical physics and practical applications. By understanding the mathematical framework and leveraging computational tools, we can develop a deeper appreciation of how varying initial conditions affect a projectile\u2019s trajectory. Future work may involve refining the model with real-world complexities such as air resistance and varying gravitational fields. Interactive Simulation Click to interact with parameters Initial Velocity (m/s): 20 Gravity (m/s\u00b2): 9.81 Launch Height (m): 0 (function() { // Calculation and plotting logic function calculateRange(theta, v0, g, h) { const thetaRad = theta * Math.PI / 180; const sinTheta = Math.sin(thetaRad); const cosTheta = Math.cos(thetaRad); const discriminant = (v0*sinTheta)**2 + 2*g*h; if(discriminant < 0) return 0; const t = (v0*sinTheta + Math.sqrt(discriminant))/g; return v0*cosTheta * t; } function updatePlot() { const v0 = parseFloat(document.getElementById('v0').value); const g = parseFloat(document.getElementById('gravity').value); const h = parseFloat(document.getElementById('height').value); const angles = Array.from({length: 90}, (_, i) => i); const ranges = angles.map(angle => calculateRange(angle, v0, g, h)); Plotly.newPlot('plotly-chart', [{ x: angles, y: ranges, type: 'scatter', mode: 'lines+markers' }], { title: `Range vs. Launch Angle (v\u2080=${v0}m/s, g=${g}m/s\u00b2, h=${h}m)`, xaxis: {title: 'Launch Angle (degrees)'}, yaxis: {title: 'Range (m)'} }); } // Event listeners document.querySelectorAll('input[type=\"range\"]').forEach(input => { input.addEventListener('input', function() { document.getElementById(this.id + 'Value').textContent = this.value; updatePlot(); }); }); // Initial plot updatePlot(); })();","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"Investigating the Range as a Function of the Angle of Projection","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#motivation","text":"Projectile motion, while seemingly simple, provides a rich framework for exploring fundamental principles of physics. The problem at hand is straightforward: analyze how the range of a projectile depends on its angle of projection. Despite its simplicity, the topic involves complex relationships governed by both linear and quadratic equations, making it an insightful subject of study. A key factor that makes this investigation compelling is the number of free parameters involved in projectile motion equations, such as initial velocity, gravitational acceleration, and launch height. These parameters contribute to a diverse set of solutions that model real-world scenarios, from the trajectory of a soccer ball to the flight path of a missile.","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#task","text":"","title":"Task"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"To analyze the range as a function of the angle of projection, we start by deriving the governing equations from fundamental principles of kinematics and dynamics. The motion of a projectile in the absence of air resistance follows Newton\u2019s second law: Equations of Motion: Horizontal displacement: $$ x = v_0 \\cos(\\theta) t $$ Vertical displacement: $$ y = v_0 \\sin(\\theta) t - \\frac{1}{2}gt^2 $$ Solving these equations yields the total time of flight \\( T \\) : $$ T = \\frac{2v_0 \\sin(\\theta)}{g} $$ Substituting into the horizontal displacement equation, we obtain the range \\( R \\) : $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ This equation shows that the range depends on the square of the initial velocity and the sine of twice the projection angle.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The range \\( R \\) is maximized when \\( \\sin(2\\theta) \\) reaches its maximum value (1), which occurs at \\( 2\\theta = 90^\\circ \\) , or \\( \\theta = 45^\\circ \\) . Increasing the initial velocity \\( v_0 \\) increases the range quadratically. A higher gravitational acceleration \\( g \\) reduces the range. For non-zero launch height, the equation for \\( R \\) becomes more complex, requiring further analysis.","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Sports: Understanding how the angle influences projectile range helps optimize techniques in soccer, basketball, and javelin throwing. Engineering: In artillery and missile technology, precise control over launch angles is essential for maximizing impact range. Space Exploration: The principles of projectile motion extend to orbital mechanics and spacecraft trajectory planning.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"To further analyze the range as a function of the projection angle, a computational tool can be developed: - Algorithm: Implement numerical simulations in Python or MATLAB to visualize projectile motion under varying conditions. - Graphical Representation: Generate plots of range versus launch angle to observe the dependency. - Advanced Considerations: Extend the model to include air resistance, variable wind conditions, and non-flat terrain.","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"The study of projectile motion offers valuable insights into both theoretical physics and practical applications. By understanding the mathematical framework and leveraging computational tools, we can develop a deeper appreciation of how varying initial conditions affect a projectile\u2019s trajectory. Future work may involve refining the model with real-world complexities such as air resistance and varying gravitational fields.","title":"Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#interactive-simulation","text":"Click to interact with parameters Initial Velocity (m/s): 20 Gravity (m/s\u00b2): 9.81 Launch Height (m): 0 (function() { // Calculation and plotting logic function calculateRange(theta, v0, g, h) { const thetaRad = theta * Math.PI / 180; const sinTheta = Math.sin(thetaRad); const cosTheta = Math.cos(thetaRad); const discriminant = (v0*sinTheta)**2 + 2*g*h; if(discriminant < 0) return 0; const t = (v0*sinTheta + Math.sqrt(discriminant))/g; return v0*cosTheta * t; } function updatePlot() { const v0 = parseFloat(document.getElementById('v0').value); const g = parseFloat(document.getElementById('gravity').value); const h = parseFloat(document.getElementById('height').value); const angles = Array.from({length: 90}, (_, i) => i); const ranges = angles.map(angle => calculateRange(angle, v0, g, h)); Plotly.newPlot('plotly-chart', [{ x: angles, y: ranges, type: 'scatter', mode: 'lines+markers' }], { title: `Range vs. Launch Angle (v\u2080=${v0}m/s, g=${g}m/s\u00b2, h=${h}m)`, xaxis: {title: 'Launch Angle (degrees)'}, yaxis: {title: 'Range (m)'} }); } // Event listeners document.querySelectorAll('input[type=\"range\"]').forEach(input => { input.addEventListener('input', function() { document.getElementById(this.id + 'Value').textContent = this.value; updatePlot(); }); }); // Initial plot updatePlot(); })();","title":"Interactive Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum Motivation The forced damped pendulum exemplifies complex dynamics emerging from the interplay of damping, restoring, and driving forces. This system exhibits phenomena ranging from resonance to chaos, making it fundamental for understanding oscillatory systems in engineering and physics. Theoretical Foundation Governing Equation The motion is described by: $$ \\frac{d^2\\theta}{dt^2} + \\frac{b}{m}\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin\\theta = \\frac{F}{mL}\\cos(\\omega_d t) $$ Linearized form (small angles): $$ \\frac{d^2\\theta}{dt^2} + 2\\beta\\omega_0\\frac{d\\theta}{dt} + \\omega_0^2\\theta = \\frac{F}{mL}\\cos(\\omega_d t) $$ Resonance Condition Maximum energy transfer occurs when: $$ \\omega_d = \\sqrt{\\omega_0^2 - 2\\beta^2} $$ Dynamics Analysis Parameter Effect on System Damping (\u03b2) \u2191 Resonance peak broadens Driving Force (F) \u2191 Amplitude increases Frequency Ratio (\u03c9_d/\u03c9_0) Phase shifts occur Practical Applications Energy Harvesting: Tuning \u03c9_d to match \u03c9\u2080 for maximum power Structural Engineering: Avoiding resonance in bridges Biological Systems: Neural oscillations modeling Interactive Simulation Damping (\u03b2): Force (F): Frequency (\u03c9_d): (function() { const solvePendulum = (beta, F, omega_d, tmax=30) => { const dt = 0.05; const omega0 = 1.0; let theta = 0.1, omega = 0; const solution = []; for(let t=0; t<=tmax; t+=dt) { const acceleration = F*Math.cos(omega_d*t) - 2*beta*omega0*omega - omega0**2*Math.sin(theta); omega += acceleration * dt; theta += omega * dt; solution.push({ t: t.toFixed(2), theta: theta, omega: omega }); } return solution; }; function updatePlot() { const beta = parseFloat(document.getElementById('beta').value); const F = parseFloat(document.getElementById('force').value); const omega_d = parseFloat(document.getElementById('freq').value); const data = solvePendulum(beta, F, omega_d); const trace1 = { x: data.map(d => d.t), y: data.map(d => d.theta), name: 'Angular Displacement', type: 'scatter' }; const trace2 = { x: data.map(d => d.theta), y: data.map(d => d.omega), name: 'Phase Portrait', mode: 'lines', type: 'scatter' }; Plotly.newPlot('pendulumPlot', [trace1, trace2], { title: `Forced Damped Pendulum Dynamics<br>\u03b2=${beta}, F=${F}, \u03c9<sub>d</sub>=${omega_d}`, grid: {rows: 1, columns: 2}, xaxis1: {title: 'Time (s)'}, yaxis1: {title: '\u03b8 (rad)'}, xaxis2: {title: '\u03b8 (rad)'}, yaxis2: {title: 'd\u03b8/dt (rad/s)'} }); } document.querySelectorAll('input[type=\"range\"]').forEach(input => { input.addEventListener('input', updatePlot); }); updatePlot(); })();","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"Investigating the Dynamics of a Forced Damped Pendulum","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#motivation","text":"The forced damped pendulum exemplifies complex dynamics emerging from the interplay of damping, restoring, and driving forces. This system exhibits phenomena ranging from resonance to chaos, making it fundamental for understanding oscillatory systems in engineering and physics.","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#theoretical-foundation","text":"","title":"Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-equation","text":"The motion is described by: $$ \\frac{d^2\\theta}{dt^2} + \\frac{b}{m}\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin\\theta = \\frac{F}{mL}\\cos(\\omega_d t) $$ Linearized form (small angles): $$ \\frac{d^2\\theta}{dt^2} + 2\\beta\\omega_0\\frac{d\\theta}{dt} + \\omega_0^2\\theta = \\frac{F}{mL}\\cos(\\omega_d t) $$","title":"Governing Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-condition","text":"Maximum energy transfer occurs when: $$ \\omega_d = \\sqrt{\\omega_0^2 - 2\\beta^2} $$","title":"Resonance Condition"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#dynamics-analysis","text":"Parameter Effect on System Damping (\u03b2) \u2191 Resonance peak broadens Driving Force (F) \u2191 Amplitude increases Frequency Ratio (\u03c9_d/\u03c9_0) Phase shifts occur","title":"Dynamics Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#practical-applications","text":"Energy Harvesting: Tuning \u03c9_d to match \u03c9\u2080 for maximum power Structural Engineering: Avoiding resonance in bridges Biological Systems: Neural oscillations modeling","title":"Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#interactive-simulation","text":"Damping (\u03b2): Force (F): Frequency (\u03c9_d): (function() { const solvePendulum = (beta, F, omega_d, tmax=30) => { const dt = 0.05; const omega0 = 1.0; let theta = 0.1, omega = 0; const solution = []; for(let t=0; t<=tmax; t+=dt) { const acceleration = F*Math.cos(omega_d*t) - 2*beta*omega0*omega - omega0**2*Math.sin(theta); omega += acceleration * dt; theta += omega * dt; solution.push({ t: t.toFixed(2), theta: theta, omega: omega }); } return solution; }; function updatePlot() { const beta = parseFloat(document.getElementById('beta').value); const F = parseFloat(document.getElementById('force').value); const omega_d = parseFloat(document.getElementById('freq').value); const data = solvePendulum(beta, F, omega_d); const trace1 = { x: data.map(d => d.t), y: data.map(d => d.theta), name: 'Angular Displacement', type: 'scatter' }; const trace2 = { x: data.map(d => d.theta), y: data.map(d => d.omega), name: 'Phase Portrait', mode: 'lines', type: 'scatter' }; Plotly.newPlot('pendulumPlot', [trace1, trace2], { title: `Forced Damped Pendulum Dynamics<br>\u03b2=${beta}, F=${F}, \u03c9<sub>d</sub>=${omega_d}`, grid: {rows: 1, columns: 2}, xaxis1: {title: 'Time (s)'}, yaxis1: {title: '\u03b8 (rad)'}, xaxis2: {title: '\u03b8 (rad)'}, yaxis2: {title: 'd\u03b8/dt (rad/s)'} }); } document.querySelectorAll('input[type=\"range\"]').forEach(input => { input.addEventListener('input', updatePlot); }); updatePlot(); })();","title":"Interactive Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Theoretical Foundation From Newton's Law of Gravitation and centripetal force equivalence: $$ \\frac{GMm}{r^2} = \\frac{mv^2}{r} $$ Substituting orbital velocity \\(v = \\frac{2\\pi r}{T}\\) , we derive: $$ T^2 = \\left(\\frac{4\\pi^2}{GM}\\right)r^3 $$ Astronomical Significance Application Implementation Exoplanet Detection Mass estimation via period analysis Satellite Engineering Geostationary orbit calculation Galactic Dynamics Dark matter distribution studies Interactive Simulation Orbital Radius (Earth Radii): 60 Central Mass (Earth Masses): 1 (function() { const G = 6.67430e-11; // Gravitational constant const earthMass = 5.972e24; // kg const earthRadius = 6.371e6; // meters function calculatePeriod(r, M) { return Math.sqrt((4 * Math.PI**2 * r**3) / (G * M)); } function updateSimulation() { const radius = parseFloat(document.getElementById('radius').value); const mass = parseFloat(document.getElementById('mass').value); // Convert to SI units const rSI = radius * earthRadius; const MSI = mass * earthMass; // Calculate orbital period const T = calculatePeriod(rSI, MSI); // Generate orbit path const theta = Array.from({length: 100}, (_, i) => i * 2 * Math.PI / 100); const x = radius * theta.map(t => Math.cos(t)); const y = radius * theta.map(t => Math.sin(t)); // Update orbit plot Plotly.newPlot('orbitPlot', [{ x: x, y: y, mode: 'lines', name: 'Orbit', line: {color: '#00ff88'} }, { x: [0], y: [0], mode: 'markers', marker: {size: 20, color: '#1e90ff'}, name: 'Central Body' }], { title: `Orbital Period: ${(T/3600).toFixed(2)} hours`, showlegend: false, aspectratio: {x: 1, y: 1} }); // Generate verification data const radii = Array.from({length: 50}, (_, i) => 2 + (i*2)); const periods = radii.map(r => calculatePeriod(r * earthRadius, MSI) / 3600 ); // Update law verification plot Plotly.newPlot('lawVerification', [{ x: radii.map(r => r**3), y: periods.map(t => t**2), mode: 'lines+markers', name: 'T\u00b2 vs r\u00b3' }], { title: 'Kepler\\'s Third Law Verification', xaxis: {title: 'Orbital Radius\u00b3 (R\u2295\u00b3)'}, yaxis: {title: 'Orbital Period\u00b2 (hours\u00b2)'} }); } // Add event listeners document.querySelectorAll('input[type=\"range\"]').forEach(input => { input.addEventListener('input', function() { document.getElementById(this.id + 'Value').textContent = this.value; updateSimulation(); }); }); // Initial render updateSimulation(); })(); Practical Applications Satellite Deployment $$ r_{geo} = \\left(\\frac{T^2GM}{4\\pi^2}\\right)^{1/3} $$ Used to calculate geostationary orbit at ~42,164 km from Earth center Exoplanet Characterization Radial velocity method uses period measurements to estimate: $$ M \\propto \\frac{r^3}{T^2} $$ Historical Navigation Ancient mariners used Moon orbital period (sidereal month = 27.3 days) for tidal predictions","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#theoretical-foundation","text":"From Newton's Law of Gravitation and centripetal force equivalence: $$ \\frac{GMm}{r^2} = \\frac{mv^2}{r} $$ Substituting orbital velocity \\(v = \\frac{2\\pi r}{T}\\) , we derive: $$ T^2 = \\left(\\frac{4\\pi^2}{GM}\\right)r^3 $$","title":"Theoretical Foundation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#astronomical-significance","text":"Application Implementation Exoplanet Detection Mass estimation via period analysis Satellite Engineering Geostationary orbit calculation Galactic Dynamics Dark matter distribution studies","title":"Astronomical Significance"},{"location":"1%20Physics/2%20Gravity/Problem_1/#interactive-simulation","text":"Orbital Radius (Earth Radii): 60 Central Mass (Earth Masses): 1 (function() { const G = 6.67430e-11; // Gravitational constant const earthMass = 5.972e24; // kg const earthRadius = 6.371e6; // meters function calculatePeriod(r, M) { return Math.sqrt((4 * Math.PI**2 * r**3) / (G * M)); } function updateSimulation() { const radius = parseFloat(document.getElementById('radius').value); const mass = parseFloat(document.getElementById('mass').value); // Convert to SI units const rSI = radius * earthRadius; const MSI = mass * earthMass; // Calculate orbital period const T = calculatePeriod(rSI, MSI); // Generate orbit path const theta = Array.from({length: 100}, (_, i) => i * 2 * Math.PI / 100); const x = radius * theta.map(t => Math.cos(t)); const y = radius * theta.map(t => Math.sin(t)); // Update orbit plot Plotly.newPlot('orbitPlot', [{ x: x, y: y, mode: 'lines', name: 'Orbit', line: {color: '#00ff88'} }, { x: [0], y: [0], mode: 'markers', marker: {size: 20, color: '#1e90ff'}, name: 'Central Body' }], { title: `Orbital Period: ${(T/3600).toFixed(2)} hours`, showlegend: false, aspectratio: {x: 1, y: 1} }); // Generate verification data const radii = Array.from({length: 50}, (_, i) => 2 + (i*2)); const periods = radii.map(r => calculatePeriod(r * earthRadius, MSI) / 3600 ); // Update law verification plot Plotly.newPlot('lawVerification', [{ x: radii.map(r => r**3), y: periods.map(t => t**2), mode: 'lines+markers', name: 'T\u00b2 vs r\u00b3' }], { title: 'Kepler\\'s Third Law Verification', xaxis: {title: 'Orbital Radius\u00b3 (R\u2295\u00b3)'}, yaxis: {title: 'Orbital Period\u00b2 (hours\u00b2)'} }); } // Add event listeners document.querySelectorAll('input[type=\"range\"]').forEach(input => { input.addEventListener('input', function() { document.getElementById(this.id + 'Value').textContent = this.value; updateSimulation(); }); }); // Initial render updateSimulation(); })();","title":"Interactive Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#practical-applications","text":"","title":"Practical Applications"},{"location":"1%20Physics/2%20Gravity/Problem_1/#satellite-deployment","text":"$$ r_{geo} = \\left(\\frac{T^2GM}{4\\pi^2}\\right)^{1/3} $$ Used to calculate geostationary orbit at ~42,164 km from Earth center","title":"Satellite Deployment"},{"location":"1%20Physics/2%20Gravity/Problem_1/#exoplanet-characterization","text":"Radial velocity method uses period measurements to estimate: $$ M \\propto \\frac{r^3}{T^2} $$","title":"Exoplanet Characterization"},{"location":"1%20Physics/2%20Gravity/Problem_1/#historical-navigation","text":"Ancient mariners used Moon orbital period (sidereal month = 27.3 days) for tidal predictions","title":"Historical Navigation"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}